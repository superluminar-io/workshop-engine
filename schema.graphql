enum UserRole {
  ATTENDEE
  ADMIN
}

type User {
  emailAddress: ID!
  role: UserRole!
}

type Workshop {
  id: ID!
  description: String
  awsAccountId: String
  title: String!
  createdAt: AWSDateTime!
  attendees: [String!]!
}

input CreateOrUpdateWorkshopInput {
  awsAccountId: String
  title: String!
  description: String
  attendees: [String!]!
}

type WorkshopList {
  items: [Workshop!]!
  nextToken: String
}

type AcceptInvitationResponse {
  ok: Boolean!
}

type DeleteWorkshopResponse {
  ok: Boolean!
}

type Query {
  me: User!
  workshops(nextToken: String, limit: Int): WorkshopList!
}

type Mutation {
  createAwsSignInUrl(awsAccountId: String!): String!
  createWorkshop(input: CreateOrUpdateWorkshopInput!): Workshop!
  updateWorkshop(
    workshopId: ID!
    input: CreateOrUpdateWorkshopInput!
  ): Workshop!
  deleteWorkshop(workshopId: ID!): DeleteWorkshopResponse!
  acceptInvitation(
    inviteId: ID!
    emailAddress: String!
  ): AcceptInvitationResponse!
  promoteUser(emailAddress: ID!, role: UserRole!): User!
}

schema {
  mutation: Mutation
  query: Query
}
